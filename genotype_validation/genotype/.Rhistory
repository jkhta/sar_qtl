#fit1 = summary(model1)
# model1
plot(model1,which=1)
plot(model1,which=2)
#outliers
plot(model1,which = 4)
# compare with 4/(n-p)
n = nrow(aba)
p = 10 #right
4/(n-p)
# we should exclude 2052
aba = aba[-2052,]
# multicolinearity, all the weight-related variables are strongly correlated.
library(car)
vif(model1)
#abalone project
setwd("/Users/Xiao/Desktop/2016_fall/STA206/final_project/")
#abalone project
setwd("/Users/James/Desktop/")
aba <- read.table("abalone.txt", header = FALSE, sep = ",")
names(aba) <- c("sex", "length", "diameter", "height", "whole_weight", "shucked_weight", "vis_weight", "shell_weight", "rings")
# check if there are zeros in height which is pointless
table(aba$height==0)
aba = subset(aba,aba$height!=0)
summary(aba$sex)
sum(aba$sex)
sum(summary(aba$sex))
#checking distribution of data between sexes
summary(aba$sex)
sum(summary(aba$sex))
#checking distribution of data between sexes
summary(aba$sex)
sum(summary(aba$sex))
c(1307, 1340, 1528)/4175
aba$rings <- log(aba$rings)
hist(aba$rings)
summary(aba_inf$sex)
for(i in colnames(aba_inf)){
print(c(summary(aba[,i]),i))
}
for(i in colnames(aba_inf)){
print(c(summary(aba_inf[,i]),i))
}
for(i in colnames(aba_inf)){
print(c(summary(aba_inf[,i]),i))
}
for(i in colnames(aba_mf)){
print(c(summary(aba_mf[,i]),i))
}
pairs(aba)
cor(aba[,-1])
rxx=cor(aba[,!names(aba)%in%c("sex","rings")])
#rxy=cor(aba[,2:10][,8]  #??
#rxy=as.matrix(rxy)
VIF=diag(solve(rxx))
R=1-(1/VIF)
VIF
R
#testing volume and density as predictors
#model wih individual components of volume
vol_0 <- lm(rings ~ sex + height + diameter + length, data = aba)
vol_1 <- lm(rings ~ sex + volume, data = aba)
#testing volume and density as predictors
#model wih individual components of volume
vol_0 <- lm(rings ~ sex + height + diameter + length, data = aba)
vol_1 <- lm(rings ~ sex + vol, data = aba)
head(aba)
aba$vol <- with(data = aba, length * diameter * height)
#aba$dens <- with(data = aba, whole_weight/vol)
aba_inf <- aba[grep("I", aba$sex),]
aba_mf <- aba[grep("M|F", aba$sex),]
#testing volume and density as predictors
#model wih individual components of volume
vol_0 <- lm(rings ~ sex + height + diameter + length, data = aba)
vol_1 <- lm(rings ~ sex + vol, data = aba)
summary(vol_0)
summary(vol_1)
#model wih individual components of volume
dens_0 <- lm(rings ~ sex + vol + whole_weight, data = aba)
dens_1 <- lm(rings ~ sex + density, data = aba)
aba$vol <- with(data = aba, length * diameter * height)
aba$dens <- with(data = aba, whole_weight/vol)
aba_inf <- aba[grep("I", aba$sex),]
aba_mf <- aba[grep("M|F", aba$sex),]
#testing volume and density as predictors
#model wih individual components of volume
vol_0 <- lm(rings ~ sex + height + diameter + length, data = aba)
vol_1 <- lm(rings ~ sex + vol, data = aba)
summary(vol_0)
summary(vol_1)
#model wih individual components of volume
dens_0 <- lm(rings ~ sex + vol + whole_weight, data = aba)
dens_1 <- lm(rings ~ sex + dens, data = aba)
summary(vol_0)
summary(vol_1)
#testing volume and density as predictors
#model wih individual components of volume
vol_0 <- lm(rings ~ sex + height + diameter + length, data = aba)
vol_1 <- lm(rings ~ sex + vol, data = aba)
summary(vol_0)
summary(vol_1)
#model wih individual components of volume
dens_0 <- lm(rings ~ sex + vol + whole_weight, data = aba)
dens_1 <- lm(rings ~ sex + dens, data = aba)
summary(dens_0)
summary(dens_1)
aaba = aba
#split into training and test sets
set.seed(1)
n = nrow(aba)
n = round(n*0.3)
ind = sample(x = 1:nrow(aba), size = n)
test = aba[ind,]
aba = aba[-ind,] #training set
summary(aba$sex)
sum(summary(aba$sex))
c(1307, 1340, 1528)/4175
summary(test$sex)
sum(summary(test$sex))
c(1307, 1340, 1528)/4175
#abalone project
setwd("/Users/Xiao/Desktop/2016_fall/STA206/final_project/")
install.packages("pdflatex")
rm(list = ls())
data_2d <- read.csv("2D_area_clean.csv", header = TRUE)
data_3d <- read.csv("3D_area.csv", header = TRUE)
data_t <- merge(data_2d, data_3d, by = "plant_id")
install.packages("ggplot2")
head(data_t)
plot(area ~ area_20131113, data = data_t)
with(data = data_t, identify(area, area_20131113, labels = row.names(data_t)))
plot(area ~ area_20131113, data = data_t)
plot(area ~ area_20131113 + shelf.x, data = data_t)
library(ggplot2)
ggplot(data_t, aes(x = area, y = area_20131113)) + geom_point() + facet_wrap(~.shelf.x)
ggplot(data_t, aes(x = area, y = area_20131113)) + geom_point() + facet_wrap(~shelf.x)
ggplot(data_t, aes(x = area, y = area_20131113)) + geom_point() + facet_wrap(~shelf.x)
ggplot(data_t, aes(x = area, y = area_20131113)) + geom_point() + facet_wrap(~shelf.x)
data_s5 <- data_t[grep("5", data_t$shelf.x),]
data_s4 <- data_t[grep("5", data_t$shelf.x),]
reg_log <- lm(log(area_20131113) ~ log(area), data = data_s4)
plot(reg_log)
reg_res <- residuals(reg_log)
outlier_thres <- 0.5
data_s4$res <- residuals(reg_log)
outlier_thres <- 0.5
reg_out <- data_s4[abs(data_s4$res) > outlier_thres,]
reg_out
data_s4 <- data_t[grep("4", data_t$shelf.x),]
reg_log <- lm(log(area_20131113) ~ log(area), data = data_s4)
plot(reg_log)
data_s4$res <- residuals(reg_log)
outlier_thres <- 0.5
reg_out <- data_s4[abs(data_s4$res) > outlier_thres,]
reg_out
qtukey(0.95, 3, 18)
qtukey(0.95, 3, 38)
rm(list = ls())
age <- c(rep("15-24",3),
rep("25-35",3),
rep("35-44",3),
rep("45-54",3),
rep("55-64",3))
diet <- rep(c("Low", "Medium", "High"),5)
fat <- c(0.73, 0.67, 0.15, 0.86, 0.75, 0.21, 0.94, 0.81, 0.26,
1.40, 1.32, 0.75, 1.62, 1.41, 0.78)
fat_df <- data.frame(age, diet, fat)
names(fat_df) <- c("Age", "Diet", "Fat")
str(fat_df)
par(mfrow = c(1,1))
fat_aov <- aov(Fat ~ as.factor(Age) + as.factor(Diet), data = fat_df)
summary(fat_aov)
fat_er <- matrix(fat_aov$residuals, ncol = 3, nrow = 5, byrow = TRUE)
colnames(fat_er) <- c("Low", "Medium", "High")
rownames(fat_er) <- unique(age)
fat_er
plot(fat_aov)
tukey.test(fat_mat, 0.01, )
ov_mean <- mean(colMeans(fat_mat))
col_mean <- colMeans(fat_mat)
row_mean <- rowMeans(fat_mat)
ov_mean
row_mean
col_mean
out_prod <- (row_mean-ov_mean) %o% (col_mean-ov_mean)
ov_mean <- mean(colMeans(fat_mat))
col_mean <- colMeans(fat_mat)
fat_mat <- matrix(fat, ncol = 3, nrow = 5, byrow = TRUE)
with(data = fat_df, interaction.plot(Diet, Age, Fat))
fat_df
mean(fat_df$Fat)
ov_mean <- mean(colMeans(fat_mat))
col_mean <- colMeans(fat_mat)
row_mean <- rowMeans(fat_mat)
ov_mean
row_mean
col_mean
out_prod <- (row_mean-ov_mean) %o% (col_mean-ov_mean)
SSBLTR_num <- sum(out_prod * fat_mat)^2
summary(fat_aov)
SSBLTR_den <- (1.3203/5 * 1.419/3)
SSBLTR <- SSBLTR_num/SSBLTR_den
SSBLTR
SSRem <- 0.0193 - SSBLTR
SSRem
f_stat <- SSBLTR/(SSRem/(15 - 5 - 3))
f_stat
qf(0.99,1,7)
pf(6.457578, 1, 7, lower.tail = FALSE)
summary(fat_aov)
fat_df$Diet <- factor(fat_df$Diet, levels = c("Low", "Medium", "High"))
library(ggplot2)
dfwc <- summary
ggplot(fat_df, aes(x = Diet, y = Fat)) +
stat_summary(fun.y = mean, geom = "bar") +
stat_summary(fun.data = mean_cl_normal, geom = "errorbar") +
ylab("Total fat level in plasma") +
ggtitle("Diet means barplot")
diet_means <- colMeans(fat_mat)
fat_lm <- lm(Fat ~ Diet, data = fat_df)
confint(fat_lm, level = 0.95)
qf(0.95, 2,8)
summary(fat_aov)
col_mean
fat_d1 <- col_mean[1] - col_mean[2]
fat_d2 <- col_mean[2] - col_mean[3]
fat_se <- sqrt(0.0024*(2/5))
fat_bonf <- qt(1-0.05/(2*2),df = 8)
fat_c1 <- c(fat_d1 - fat_se*fat_bonf, fat_d1 + fat_se*fat_bonf)
fat_c2 <- c(fat_d2 - fat_se*fat_bonf, fat_d2 + fat_se*fat_bonf)
fat_c1
fat_c2
print(c(fat_c1, fat_c2))
summary(fat_aov)
qf(0.95, 4, 8)
qtukey(0.95, 3, 18)
qtukey(0.95, 3, 38)
exp1 = data.frame( response = 1+rnorm(7*4),
block = as.factor( rep(1:7, times = 4) ),
treat = as.factor( rep(1:4, each =7 )))
attach( exp1 )
exp1.aov = aov( lm( response~block+treat ))  ## fit anova model
str(exp1.aov)
exp1.residuals   = exp1.aov$residuals
exp1.fittedvalue = exp1.aov$fitted.values
plot(exp1.residuals~exp1.fittedvalue)  # resid v.s. fitted val
qqnorm( exp1.residuals )               # qqplot
library(ggplot2)
ggplot(data = exp1,  aes( y = response, x = treat, linetype = block, group=block )) +
geom_line() + geom_point()+ ggtitle("Resp v.s. Treat by Block")
plot( response, x = as.numeric(treat), type='n',
main = "Resp v.s. Treat by Block",
xlab = 'treat',
ylab = 'response')
sapply(1:7, function(i){
data= subset(exp1, block == i )
lines( y = data$response, x = as.numeric(data$treat), lty = i  )
})   # you may add a legend
summary(exp1.aov)
treat.mean = sapply(1:4, function(i) mean( subset(exp1$response, exp1$treat == i )) )
bar_interval = data.frame(treat = 1:4,
mu_i  = treat.mean,
lower_bound = treat.mean - 0.049,
upper_bound = treat.mean +0.049)
ggplot(data = bar_interval, aes(y=mu_i,x = treat)) +
geom_bar(stat = 'identity') +
geom_errorbar(aes(ymax = upper_bound, ymin = lower_bound), width = 0.3, colour='red') +
ggtitle('Bar-Interval')
?mean_cl_normal
x <- rnorm(100)
mean_cl_boo(x)
mean_cl_boot(x)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
remove.packages("ggplot2", lib="~/R/win-library/3.3")
warnings()
install.packages("ggplot2", dependencies = TRUE)
library(ggplot2)
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
remove.packages("RcppEigen", lib="~/R/win-library/3.3")
install.packages("Rcpp")
devtools::install_github("csgillespie/efficientR")
devtools::install_github("csgillespie/efficientR")
install.packages('installr')
library(installr)
updateR()
install.packages(ask = FALSE)
update.packages(ask = FALSE)
update.packages()
update.packages()
install.packages("RcppEigen")
install.packages("RcppEigen")
Sys.getenv('PATH')
system('g++ -v')
install.packages("RcppEigen")
update.packages()
update.packages(ask = FALSE)
install.packages("gfortran")
install.packages("gfortran")
Sys.getenv("PATH")
system('g++ -v')
system('where make')
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR))
dir.create(dotR)
M <- file.path(dotR, "Makevars")
if (!file.exists(M))
file.create(M)
cat("\nCXXFLAGS=-O3 -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat(M)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
update.packages()
y
y
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
install.packages("qtl")
install.packages("qtlbook")
install.packages("circlize")
install.packages("snow")
install.packages("circlize")
install.packages("data.table")
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlbook)
require(snow)
library(circlize)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/nam_cam_fixing/8 - qtl_analysis/output/")
load("E:/runcie_lab/shade_avoidance_data_and_scripts/8 - qtl_analysis/output/col_sha_orig_and_area_and_pc_analysis.RData")
warnings()
geno_all_qtls <- read.csv("E:/runcie_lab/shade_avoidance_papers/figures/tables/geno_single_col_sha_qtl_intervals.csv", header = TRUE, stringsAsFactors = FALSE)
warnings()
install.packages("壮cales")
install.packages("bookdown")
install.packages("rmarkdown")
install.packages("tufte")
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(knitr)
library(ggplot2)
rm(list = ls())
one <- seq(0, 1, by = 0.01)
two <- seq(0, 1, by = 0.01)
three <- 1 - (one * two)
plot(three)
plot(one, three)
three <- (1 - one) * (1 - two)
plot(one, three)
setwd("/Users/James/Desktop/")
oil_data = read.csv('austr_soy.csv')
str(oil_data)
oil_data$year = as.factor(oil_data$year)
with(oil_data,table(loc,year))
ggplot(oil_data,aes(x=yield,y=oil)) + geom_point()
library(lmerTest)
ggplot(oil_data,aes(x=yield,y=oil)) + geom_point(aes(color = gen)) + geom_smooth(aes(color = gen),se=F,method='lm')
-log10(0.01)
-log10(0.001)
library(data.table)
rm(list = ls())
#first reading in the genotype probability file
setwd("/Users/James/Documents/GitHub/sar_qtl/6_push_button/")
geno_array <- readRDS("nam_rqtl_geno_prob_array_final_0.99_no_kinship.rds")
marker_anno <- fread("nam_marker_info_final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
marker_anno$snp <- paste("m", marker_anno$snp, sep = "_")
#reading in the qtl data to extract the proper markers
setwd("/Users/James/Documents/GitHub/sar_qtl/figures/qtl_table/")
bd_qtl <- fread("bd_geno_qtl_ci.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
fri_flc_qtl <- c("m_4_407208", "m_5_3799350")
#subsetting from the genotype probability array FRI and FLC
names(geno_array) <- paste("m", names(geno_array), sep = "_")
geno_array_FRI_FLC <- geno_array[fri_flc_qtl]
#grabbing genotypes for FRI and FLC individually to compare against the past genotype data
geno_array_FRI_FLC_col <- do.call(cbind, lapply(geno_array_FRI_FLC, function(x) ifelse(x[, 1] >= 0.5, "A", "B")))
geno_array_FRI <- data.frame(geno = rownames(geno_array_FRI_FLC_col), genotypes = geno_array_FRI_FLC_col[, 1])
geno_array_FLC <- data.frame(geno = rownames(geno_array_FRI_FLC_col), genotypes = geno_array_FRI_FLC_col[, 2])
#combining the QTL information with the cM information
marker_anno_FRI_FLC <- subset(marker_anno, snp %in% fri_flc_qtl)
marker_anno_FRI_FLC$Start_Mb <- as.numeric(sapply(strsplit(marker_anno_FRI_FLC$snp, split = "_"), function(x) x[3]))
#reading in the past genotypes data
setwd("/Users/James/Documents/GitHub/sar_qtl/genotype_validation/genotype/")
past_genotypes <- lapply(list.files(pattern = "RV_genotypes.csv"), function(x) fread(x, sep = ",", header = TRUE, stringsAsFactors = FALSE))
genotype_names <- sapply(strsplit(list.files(pattern = "RV_genotypes.csv"), split = "_"), function(x) x[1])
#changing C's and D's to NAs, and then adding genotype names to the columns
for (i in 1:length(past_genotypes)) {
past_genotypes[[i]][past_genotypes[[i]] == "C"] <- "NA"
past_genotypes[[i]][past_genotypes[[i]] == "D"] <- "NA"
colnames(past_genotypes[[i]])[5:ncol(past_genotypes[[i]])] <- paste(paste(genotype_names[i], genotype_names[i], sep = "_"), colnames(past_genotypes[[i]])[5:ncol(past_genotypes[[i]])], sep = "")
}
#grabbing only the markers on chromosome 4
past_genotypes_chr_4 <- lapply(past_genotypes, function(x) subset(x, Chr == 4))
#calculating the differences between Marc's genotype data and the publicly available genotype data
for (i in 1:length(past_genotypes_chr_4)) {
past_genotypes_chr_4[[i]]$cM_diff <- abs(past_genotypes_chr_4[[i]]$CR_cM - marker_anno_FRI_FLC$cM[1])
past_genotypes_chr_4[[i]]$Mb_diff <- abs(past_genotypes_chr_4[[i]]$Start_Mb * 1000000 - marker_anno_FRI_FLC$Start_Mb[1])
}
#two different metrics of closeness: cM (genetic distance) or Mb (physical distance); I think physical distance would be a lot more consistent
past_genotypes_FRI <- lapply(past_genotypes_chr_4, function(x) t(subset(x, cM_diff == min(cM_diff))))
past_genotypes_FRI <- lapply(past_genotypes_chr_4, function(x) t(subset(x, Start_Mb == min(Start_Mb))))
past_genotypes_FRI
past_genotypes_chr_4[[i]]$Mb_diff
past_genotypes_FRI <- lapply(past_genotypes_chr_4, function(x) t(subset(x, Start_Mb == min(Mb_diff))))
past_genotypes_FRI
library(data.table)
rm(list = ls())
#first reading in the genotype probability file
setwd("/Users/James/Documents/GitHub/sar_qtl/6_push_button/")
geno_array <- readRDS("nam_rqtl_geno_prob_array_final_0.99_no_kinship.rds")
marker_anno <- fread("nam_marker_info_final.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
marker_anno$snp <- paste("m", marker_anno$snp, sep = "_")
#reading in the qtl data to extract the proper markers
setwd("/Users/James/Documents/GitHub/sar_qtl/figures/qtl_table/")
bd_qtl <- fread("bd_geno_qtl_ci.csv", sep = ",", header = TRUE, stringsAsFactors = FALSE)
fri_flc_qtl <- c("m_4_407208", "m_5_3799350")
#subsetting from the genotype probability array FRI and FLC
names(geno_array) <- paste("m", names(geno_array), sep = "_")
geno_array_FRI_FLC <- geno_array[fri_flc_qtl]
#grabbing genotypes for FRI and FLC individually to compare against the past genotype data
geno_array_FRI_FLC_col <- do.call(cbind, lapply(geno_array_FRI_FLC, function(x) ifelse(x[, 1] >= 0.5, "A", "B")))
geno_array_FRI <- data.frame(geno = rownames(geno_array_FRI_FLC_col), genotypes = geno_array_FRI_FLC_col[, 1])
geno_array_FLC <- data.frame(geno = rownames(geno_array_FRI_FLC_col), genotypes = geno_array_FRI_FLC_col[, 2])
#combining the QTL information with the cM information
marker_anno_FRI_FLC <- subset(marker_anno, snp %in% fri_flc_qtl)
marker_anno_FRI_FLC$Start_Mb <- as.numeric(sapply(strsplit(marker_anno_FRI_FLC$snp, split = "_"), function(x) x[3]))
#reading in the past genotypes data
setwd("/Users/James/Documents/GitHub/sar_qtl/genotype_validation/genotype/")
past_genotypes <- lapply(list.files(pattern = "RV_genotypes.csv"), function(x) fread(x, sep = ",", header = TRUE, stringsAsFactors = FALSE))
genotype_names <- sapply(strsplit(list.files(pattern = "RV_genotypes.csv"), split = "_"), function(x) x[1])
#changing C's and D's to NAs, and then adding genotype names to the columns
for (i in 1:length(past_genotypes)) {
past_genotypes[[i]][past_genotypes[[i]] == "C"] <- "NA"
past_genotypes[[i]][past_genotypes[[i]] == "D"] <- "NA"
colnames(past_genotypes[[i]])[5:ncol(past_genotypes[[i]])] <- paste(paste(genotype_names[i], genotype_names[i], sep = "_"), colnames(past_genotypes[[i]])[5:ncol(past_genotypes[[i]])], sep = "")
}
#grabbing only the markers on chromosome 4
past_genotypes_chr_4 <- lapply(past_genotypes, function(x) subset(x, Chr == 4))
#calculating the differences between Marc's genotype data and the publicly available genotype data
for (i in 1:length(past_genotypes_chr_4)) {
past_genotypes_chr_4[[i]]$cM_diff <- abs(past_genotypes_chr_4[[i]]$CR_cM - marker_anno_FRI_FLC$cM[1])
past_genotypes_chr_4[[i]]$Mb_diff <- abs(past_genotypes_chr_4[[i]]$Start_Mb * 1000000 - marker_anno_FRI_FLC$Start_Mb[1])
}
past_genotypes_FRI <- lapply(past_genotypes_chr_4, function(x) t(subset(x, Start_Mb == min(Mb_diff))))
past_genotypes_FRI
past_genotypes_FRI <- lapply(past_genotypes_chr_4, function(x) t(subset(x, Mb_diff == min(Mb_diff))))
past_genotypes_FRI
#genotype plots
FRI_correlation <- c()
for (i in 1:length(past_genotypes_FRI)) {
past_genotypes_FRI[[i]] <- data.frame(geno = rownames(past_genotypes_FRI[[i]]), genotypes = past_genotypes_FRI[[i]][, 1])
FRI_merged <- merge(geno_array_FRI, past_genotypes_FRI[[i]], by = "geno")
FRI_cor <- with(FRI_merged, cor(as.numeric(genotypes.x), as.numeric(genotypes.y), use = "pairwise.complete.obs"))
single_pop_FRI_cor <- data.frame(pop = genotype_names[i], cor = FRI_cor, num_geno = nrow(FRI_merged))
FRI_correlation <- rbindlist(list(FRI_correlation, single_pop_FRI_cor))
}
FRI_correlation
past_genotypes_chr_5 <- lapply(past_genotypes, function(x) subset(x, Chr == 5))
for (i in 1:length(past_genotypes_chr_5)) {
past_genotypes_chr_5[[i]]$cM_diff <- abs(past_genotypes_chr_5[[i]]$CR_cM - marker_anno_FRI_FLC$cM[2])
}
past_genotypes_FLC <- lapply(past_genotypes_chr_5, function(x) t(subset(x, Mb_diff == min(Mb_diff))))
#genotype plots
FLC_correlation <- c()
for (i in 1:length(past_genotypes_FLC)) {
past_genotypes_FLC[[i]] <- data.frame(geno = rownames(past_genotypes_FLC[[i]]), genotypes = past_genotypes_FLC[[i]][, 1])
FLC_merged <- merge(geno_array_FRI, past_genotypes_FLC[[i]], by = "geno")
FLC_cor <- with(FLC_merged, cor(as.numeric(genotypes.x), as.numeric(genotypes.y), use = "pairwise.complete.obs"))
single_pop_FLC_cor <- data.frame(pop = genotype_names[i], cor = FLC_cor, num_geno = nrow(FLC_merged))
FLC_correlation <- rbindlist(list(FLC_correlation, single_pop_FLC_cor))
}
past_genotypes_chr_5 <- lapply(past_genotypes, function(x) subset(x, Chr == 5))
for (i in 1:length(past_genotypes_chr_5)) {
past_genotypes_chr_5[[i]]$cM_diff <- abs(past_genotypes_chr_5[[i]]$CR_cM - marker_anno_FRI_FLC$cM[2])
past_genotypes_chr_5[[i]]$Mb_diff <- abs(past_genotypes_chr_5[[i]]$Start_Mb * 1000000 - marker_anno_FRI_FLC$Start_Mb[2])
}
past_genotypes_FLC <- lapply(past_genotypes_chr_5, function(x) t(subset(x, Mb_diff == min(Mb_diff))))
#genotype plots
FLC_correlation <- c()
for (i in 1:length(past_genotypes_FLC)) {
past_genotypes_FLC[[i]] <- data.frame(geno = rownames(past_genotypes_FLC[[i]]), genotypes = past_genotypes_FLC[[i]][, 1])
FLC_merged <- merge(geno_array_FRI, past_genotypes_FLC[[i]], by = "geno")
FLC_cor <- with(FLC_merged, cor(as.numeric(genotypes.x), as.numeric(genotypes.y), use = "pairwise.complete.obs"))
single_pop_FLC_cor <- data.frame(pop = genotype_names[i], cor = FLC_cor, num_geno = nrow(FLC_merged))
FLC_correlation <- rbindlist(list(FLC_correlation, single_pop_FLC_cor))
}
FLC_correlation
past_genotypes_FRI
past_genotypes_chr_4_min <- lapply(past_genotypes_chr_4, function(x) tail(x, 2))
past_genotypes_chr_4_min
past_genotypes_chr_4_min <- lapply(past_genotypes_chr_4, function(x) subset(x, cM_diff == min(cM_diff)))
past_genotypes_chr_4_min
past_genotypes_chr_4_min <- lapply(past_genotypes_chr_4, function(x) subset(x, cM_diff == min(cM_diff))$cM_diff)
past_genotypes_chr_4_min
past_genotypes_chr_4_Mb_min <- lapply(past_genotypes_chr_4, function(x) subset(x, Mb_diff == min(Mb_diff))$Mb_diff)
past_genotypes_chr_4_Mb_min
past_genotypes_chr_5_cM_min <- lapply(past_genotypes_chr_5, function(x) subset(x, cM_diff == min(cM_diff))$cM_diff)
past_genotypes_chr_5_Mb_min <- lapply(past_genotypes_chr_5, function(x) subset(x, Mb_diff == min(Mb_diff))$Mb_diff)
past_genotypes_chr_5_cM_min
past_genotypes_chr_5_Mb_min
