}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " - ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_all_avg_values_list <- list()
#now need to average the values
for (j in colnames(pop_tables[[1]])) {
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list[[j]] <- pop_avg_value_df
}
#putting all effects into same df
pop_all_avg_values_df <- do.call(cbind, pop_all_avg_values_list)
#generating means and credible intervals
trait_mean_and_ci <- do.call(cbind, apply(pop_all_avg_values_df, 2, function(x) post_mean_and_ci(x)))
colnames(trait_mean_and_ci) <- colnames(pop_tables[[1]])
rownames(trait_mean_and_ci) <- c(chosen_phenotype, paste(chosen_phenotype, "ci", sep = "_"))
all_trait_table <- rbind(all_trait_table, trait_mean_and_ci)
}
pop_tables
#this script will generate a table for the significances of the fixed, random, and heritabilities
#i will generate credible intervals for each effect
library(brms)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
#calculating CV
pop_ps$CV <- with(pop_ps, sqrt(gxe_var)/treatment_fixef)
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " - ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
i <- 1
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_all_avg_values_list <- list()
colnames(pop_tables[[1]])
j <- "CV"
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_values
pop_avg_values <- apply(pop_values, 2, function(x) mean(x))
pop_avg_values
mean(pop_avg_values)
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
mean(pop_avg_values)
#this script will generate a table for the significances of the fixed, random, and heritabilities
#i will generate credible intervals for each effect
library(brms)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
#calculating CV
pop_ps$CV <- with(pop_ps, sqrt(gxe_var)/treatment_fixef)
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " - ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_all_avg_values_list <- list()
#now need to average the values
for (j in colnames(pop_tables[[1]])) {
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list[[j]] <- pop_avg_value_df
}
#putting all effects into same df
pop_all_avg_values_df <- do.call(cbind, pop_all_avg_values_list)
#generating means and credible intervals
trait_mean_and_ci <- do.call(cbind, apply(pop_all_avg_values_df, 2, function(x) post_mean_and_ci(x)))
colnames(trait_mean_and_ci) <- colnames(pop_tables[[1]])
rownames(trait_mean_and_ci) <- c(chosen_phenotype, paste(chosen_phenotype, "ci", sep = "_"))
all_trait_table <- rbind(all_trait_table, trait_mean_and_ci)
}
all_trait_table
all_trait_table <- data.frame(data.table(all_trait_table, keep.rownames = TRUE), stringsAsFactors = FALSE)
all_trait_table
colnames(all_trait_table)[1] <- "trait"
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", trait))
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", trait))
setwd("/Users/jkhta/Desktop/nam_cam_fixing/29 - Heritabilities/output/")
fwrite(all_trait_table, file = "trait_effects_and_h2.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_ci_only, file = "trait_effects_and_h2_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_no_ci, file = "trait_effects_and_h2_no_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
all_trait_table
all_trait_table_ci_only
all_trait_table_ci_only
all_trait_table_post_mean_and_ci <- c()
all_trait_table_ci_only
all_trait_table_ci_only
all_trait_table_no_ci
phenotype
i <- "bd"
phenotype_post_mean <- subset(all_trait_table_no_ci, trait == i)
phenotype_post_mean
phenotype_post_mean <- subset(all_trait_table_no_ci, trait == i, select = !c(trait))
phenotype_post_mean
phenotype_post_mean <- subset(all_trait_table_no_ci, trait == i, select = !trait)
phenotype_post_mean <- subset(all_trait_table_no_ci, trait == i)[, 2:ncol(all_trait_table_no_ci)]
phenotype_post_mean
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == i)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_mean
all_trait_table_ci_only
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(i, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_ci
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
phenotype_post_mean_and_ci
i <- 1
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
phenotype_post_mean_and_ci
all_trait_table_no_ci[i, 2:ncol(all_trait_table_no_ci)] <- phenotype_post_mean_and_ci
all_trait_table_no_ci
all_trait_table_no_ci[i, 2:ncol(all_trait_table_no_ci)] <- as.character(phenotype_post_mean_and_ci)
as.character(phenotype_post_mean_and_ci)
#subsetting different data frames for different outputs
all_trait_table <- data.frame(data.table(all_trait_table, keep.rownames = TRUE), stringsAsFactors = FALSE)
colnames(all_trait_table)[1] <- "trait"
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", trait))
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", trait))
all_trait_table_post_mean_and_ci <- c()
i <- 1
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
all_trait_table_no_ci[i, 2:ncol(all_trait_table_no_ci)] <- as.character(phenotype_post_mean_and_ci)
all_trait_table_no_ci
all_trait_table_no_ci
i <- 1
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
phenotype_post_mean_and_ci
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
#this script will generate a table for the significances of the fixed, random, and heritabilities
#i will generate credible intervals for each effect
library(brms)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
#calculating CV
pop_ps$CV <- with(pop_ps, sqrt(gxe_var)/treatment_fixef)
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " - ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_all_avg_values_list <- list()
#now need to average the values
for (j in colnames(pop_tables[[1]])) {
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list[[j]] <- pop_avg_value_df
}
#putting all effects into same df
pop_all_avg_values_df <- do.call(cbind, pop_all_avg_values_list)
#generating means and credible intervals
trait_mean_and_ci <- do.call(cbind, apply(pop_all_avg_values_df, 2, function(x) post_mean_and_ci(x)))
colnames(trait_mean_and_ci) <- colnames(pop_tables[[1]])
rownames(trait_mean_and_ci) <- c(chosen_phenotype, paste(chosen_phenotype, "ci", sep = "_"))
all_trait_table <- rbind(all_trait_table, trait_mean_and_ci)
}
#subsetting different data frames for different outputs
all_trait_table <- data.frame(data.table(all_trait_table, keep.rownames = TRUE), stringsAsFactors = FALSE)
colnames(all_trait_table)[1] <- "trait"
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", trait))
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", trait))
all_trait_table_post_mean_and_ci <- c()
i <- 1
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
all_trait_table_post_mean_and_ci <- all_trait_table_no_ci
all_trait_table_post_mean_and_ci[i, 2:ncol(all_trait_table_post_mean_and_ci)] <- as.character(phenotype_post_mean_and_ci)
all_trait_table_post_mean_and_ci
all_trait_table_post_mean_and_ci <- rbindlist(list(all_trait_table_post_mean_and_ci, data.frame(t(phenotype_post_mean_and_ci))))
all_trait_table_post_mean_and_ci <- c()
all_trait_table_post_mean_and_ci <- rbindlist(list(all_trait_table_post_mean_and_ci, data.frame(t(phenotype_post_mean_and_ci))))
all_trait_table_post_mean_and_ci
all_trait_table_post_mean_and_ci <- c()
#creating data frame with both the posterior mean and credible intervals
for (i in 1:length(phenotype)) {
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
all_trait_table_post_mean_and_ci <- rbindlist(list(all_trait_table_post_mean_and_ci, data.frame(t(phenotype_post_mean_and_ci))))
}
all_trait_table_post_mean_and_ci
all_trait_table_post_mean_and_ci <- cbind(data.frame(trait = phenotype), all_trait_table_post_mean_and_ci)
all_trait_table_post_mean_and_ci
all_trait_table_post_mean_and_ci <- c()
#creating data frame with both the posterior mean and credible intervals
for (i in 1:length(phenotype)) {
phenotype_name <- phenotype[i]
phenotype_post_mean <- unlist(subset(all_trait_table_no_ci, trait == phenotype_name)[, 2:ncol(all_trait_table_no_ci)])
phenotype_post_ci <- unlist(subset(all_trait_table_ci_only, grepl(phenotype_name, trait))[, 2:ncol(all_trait_table_ci_only)])
phenotype_post_mean_and_ci <- paste(phenotype_post_mean, " (", phenotype_post_ci, ")", sep = "")
all_trait_table_post_mean_and_ci <- rbindlist(list(all_trait_table_post_mean_and_ci, data.frame(t(phenotype_post_mean_and_ci), stringsAsFactors = FALSE)))
}
all_trait_table_post_mean_and_ci <- cbind(data.frame(trait = phenotype, stringsAsFactors = FALSE), all_trait_table_post_mean_and_ci)
all_trait_table_post_mean_and_ci
colnames(all_trait_table_post_mean_and_ci) <- colnames(all_trait_table_no_ci)
all_trait_table_post_mean_and_ci
setwd("/Users/jkhta/Desktop/nam_cam_fixing/29 - Heritabilities/output/")
fwrite(all_trait_table, file = "trait_effects_and_h2.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_ci_only, file = "trait_effects_and_h2_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_no_ci, file = "trait_effects_and_h2_no_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_post_mean_and_ci, file = "trait_effects_and_h2_post_mean_and_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
#this script will generate a LaTeX output of different tables
library(data.table)
library(xtable)
library(plyr)
rm(list = ls())
#table output for trait effects and heritabilities
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
h2_table <- fread("trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
acc_h2_table <- fread("acc_trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
#grabbing only the gxe heritability
acc_h2_table_subset <- subset(acc_h2_table, select = c(trait, acc_gxe_h2))
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table_subset, by = "trait")
#changing column names and removing underscores
rownames(h2_table_merge) <- NULL
colnames(h2_table_merge) <- c("Trait", "Shelf", "Intercept", "Treatment", "Geno Var", "GxE Var", "Residual Var", "G-PVE", "GxE-PVE", "Acc. GxE-PVE")
#multiplying H2 and GxE PVE by 100 to represent percentages
h2_table_merge$`G-PVE` <- h2_table_merge$`G-PVE` * 100
h2_table_merge$`GxE-PVE` <- h2_table_merge$`GxE-PVE` * 100
#this script will generate a LaTeX output of different tables
library(data.table)
library(xtable)
library(plyr)
rm(list = ls())
#table output for trait effects and heritabilities
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
h2_table <- fread("trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
acc_h2_table <- fread("acc_trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
#grabbing only the gxe heritability
acc_h2_table_subset <- subset(acc_h2_table, select = c(trait, acc_gxe_h2))
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table_subset, by = "trait")
h2_table_merge
h2_table_merge$CV <- NULL
#changing column names and removing underscores
rownames(h2_table_merge) <- NULL
colnames(h2_table_merge) <- c("Trait", "Shelf", "Intercept", "Treatment", "Geno Var", "GxE Var", "Residual Var", "G-PVE", "GxE-PVE", "Acc. GxE-PVE")
#multiplying H2 and GxE PVE by 100 to represent percentages
h2_table_merge$`G-PVE` <- h2_table_merge$`G-PVE` * 100
h2_table_merge$`GxE-PVE` <- h2_table_merge$`GxE-PVE` * 100
h2_table_merge$`Acc. GxE-PVE` <- h2_table_merge$`Acc. GxE-PVE` * 100
#moreving underscores
h2_table_merge$Trait <- gsub("_", "", h2_table_merge$Trait)
#changing trait names
h2_table_merge$Trait <- revalue(h2_table_merge$Trait, c("bd" = "BD", "h3h1" = "IG", "idry" = "IB", "rdry" = "RB"))
#removing columns that are already included in Table 1
h2_table_merge$Intercept <- NULL
h2_table_merge$Treatment <- NULL
#generating xtable
print(xtable(h2_table_merge, label = ("S2_Table"), digits = 2), include.rownames=FALSE)
h2_table
#table with sun intercept, treatment fixed effect, and coefficient of variation
h2_table_new <- data.frame(Trait = h2_table$trait,
Intercept = h2_table$int_fixef,
Treatment = h2_table$treatment_fixef,
CV_g = abs(h2_table$CV),
stringsAsFactors = FALSE)
h2_table_new
h2_table_new$Trait <- gsub("_", "", h2_table_new$Trait)
#changing trait names
h2_table_new$Trait <- revalue(h2_table_new$Trait, c("bd" = "BD", "h3h1" = "IG", "idry" = "IB", "rdry" = "RB"))
print(xtable(h2_table_new, label = ("Table 1"), caption = "Averages of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) for each trait. bd, bolting time; h3h1, inflorescence growth over 2 weeks; rdry, dry rosette biomass; idry, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
#generating a table for the effects and their CI's
h2_table_with_post_mean_and_ci <- fread("trait_effects_and_h2_post_mean_and_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
h2_table_with_post_mean_and_ci
h2_table_new_with_ci <- data.frame(Trait = h2_table_with_post_mean_and_ci$trait,
Intercept = h2_table_with_post_mean_and_ci$int_fixef,
Treatment = h2_table_with_post_mean_and_ci$treatment_fixef,
CV_g = h2_table_with_post_mean_and_ci$CV,
stringsAsFactors = FALSE)
h2_table_new_with_ci
h2_table_new_with_ci$Trait <- revalue(h2_table_new_with_ci$Trait, c("bd" = "BD", "h3h1" = "IG", "idry" = "IB", "rdry" = "RB"))
h2_table_new_with_ci$Trait <- gsub("_", "", h2_table_new_with_ci$Trait)
h2_table_new_with_ci$Trait <- revalue(h2_table_new_with_ci$Trait, c("bd" = "BD", "h3h1" = "IG", "idry" = "IB", "rdry" = "RB"))
h2_table_new_with_ci <- data.frame(Trait = h2_table_with_post_mean_and_ci$trait,
Intercept = h2_table_with_post_mean_and_ci$int_fixef,
Treatment = h2_table_with_post_mean_and_ci$treatment_fixef,
CV_g = h2_table_with_post_mean_and_ci$CV,
stringsAsFactors = FALSE)
h2_table_new_with_ci
h2_table_new_with_ci$Trait <- gsub("_", "", h2_table_new_with_ci$Trait)
h2_table_new_with_ci
h2_table_new_with_ci$Trait <- revalue(h2_table_new_with_ci$Trait, c("bd" = "BD", "h3h1" = "IG", "idry" = "IB", "rdry" = "RB"))
h2_table_new_with_ci
print(xtable(h2_table_new_with_ci, label = ("Table 1"), caption = "Posterior means of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) averaged over all populations for each trait. Values in parentheses next to each posterior mean is the 95% credible interval for the mean. BD, bolting days; IG, inflorescence growth over 2 weeks; RB, dry rosette biomass; IB, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
print(xtable(h2_table_new_with_ci, label = ("Table 1"), caption = "Posterior means of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) averaged over all populations for each trait. Values in parentheses next to each posterior mean is the 95\% credible interval for the mean. BD, bolting days; IG, inflorescence growth over 2 weeks; RB, dry rosette biomass; IB, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
print(xtable(h2_table_new_with_ci, label = ("Table 1"), caption = "Posterior means of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) averaged over all populations for each trait. Values in parentheses next to each posterior mean is the 95\\% credible interval for the mean. BD, bolting days; IG, inflorescence growth over 2 weeks; RB, dry rosette biomass; IB, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
print(xtable(h2_table_new, label = ("Table 1"), caption = "Posterior means of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) averaged over all populations for each trait. BD, bolting days; IG, inflorescence growth over 2 weeks; RB, dry rosette biomass; IB, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
#this script will plot the allelic series for each QTL and trait across populations
library(data.table)
library(ggplot2)
library(ggpubr)
rm(list = ls())
#reading in the allelic series data
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/data/")
nam_trait_lme4qtl_fixef <- fread("trait_lme4qtl_fixef_no_cov.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
#reading in the file to change qtl names
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/qtl_table/data/")
trait_qtl_name_match <- fread("sar_gxe_matched_qtl_name.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
trait_qtl_name_match$trait_qtl <- with(trait_qtl_name_match, paste(Trait, `QTL Marker`, sep = "_"))
#this is so the allele represents substituting from Col-0 allele to alternative
#parent allele
nam_trait_lme4qtl_fixef$fixef <- nam_trait_lme4qtl_fixef$fixef * -1
#only working with gxe traits
nam_trait_lme4qtl_fixef_gxe <- subset(nam_trait_lme4qtl_fixef, grepl("_gxe", trait))
nam_trait_lme4qtl_fixef_gxe$fixef_norm <- with(nam_trait_lme4qtl_fixef_gxe, fixef/abs(trt_eff))
nam_trait_lme4qtl_fixef_gxe$fixef_std_norm <- with(nam_trait_lme4qtl_fixef_gxe, fixef_std/abs(trt_eff))
#changing trait names
new_trait_name_df <- data.frame(old_name = c("bd_gxe", "h3_h1_gxe", "i_dry_gxe", "r_dry_gxe"),
new_name = c("BD_SAR", "IG_SAR", "IB_SAR", "RB_SAR"),
stringsAsFactors = FALSE)
nam_trait_lme4qtl_fixef_gxe$trait <- mapvalues(nam_trait_lme4qtl_fixef_gxe$trait,
from = new_trait_name_df$old_name,
to = new_trait_name_df$new_name)
nam_trait_lme4qtl_fixef_gxe$trait_qtl <- with(nam_trait_lme4qtl_fixef_gxe, paste(trait, qtl, sep = "_"))
nam_trait_lme4qtl_fixef_gxe$QTL <- mapvalues(nam_trait_lme4qtl_fixef_gxe$trait_qtl,
from = trait_qtl_name_match$trait_qtl,
to = trait_qtl_name_match$QTL)
for (i in unique(nam_trait_lme4qtl_fixef_gxe$trait)) {
nam_trait_lme4qtl_fixef_gxe_subset <- subset(nam_trait_lme4qtl_fixef_gxe, trait == i)
nam_trait_lme4qtl_fixef_gxe_subset <- nam_trait_lme4qtl_fixef_gxe_subset[order(nam_trait_lme4qtl_fixef_gxe_subset$qtl), ]
for (j in unique(nam_trait_lme4qtl_fixef_gxe_subset$QTL)) {
nam_trait_lme4qtl_fixef_gxe_subset_qtl <- subset(nam_trait_lme4qtl_fixef_gxe_subset, QTL == j)
plot_name <- paste(i, "fixef_ggplot", j, sep = "_")
assign(plot_name, ggplot(nam_trait_lme4qtl_fixef_gxe_subset_qtl, aes(x = pop, y = fixef_norm, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef_norm - fixef_std_norm, ymax = fixef_norm + fixef_std_norm), width = 0.2) +
facet_grid(~ QTL, scale = "free") +
xlab("Population") +
ylab("% Change in plasticity") +
theme(text = element_text(size = 20),
axis.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 20),
legend.position = "none"))
}
}
ggarrange(BD_SAR_fixef_ggplot_BD_SAR4_2,
BD_SAR_fixef_ggplot_BD_SAR5_1,
RB_SAR_fixef_ggplot_RB_SAR4_1,
RB_SAR_fixef_ggplot_RB_SAR5_2,
IB_SAR_fixef_ggplot_IB_SAR4_1,
nrow = 2,
ncol = 3,
labels = c("A", "B", "C", "D", "E"),
font.label = list(size = 25))
BD_SAR_fixef_ggplot_BD_SAR5_1 <- BD_SAR_fixef_ggplot_BD_SAR5_1 + theme(axis.title.y = element_blank())
RB_SAR_fixef_ggplot_RB_SAR4_1 <- RB_SAR_fixef_ggplot_RB_SAR4_1 + theme(axis.title.y = element_blank())
IB_SAR_fixef_ggplot_IB_SAR4_1 <- IB_SAR_fixef_ggplot_IB_SAR4_1 + theme(axis.title.y = element_blank())
ggarrange(BD_SAR_fixef_ggplot_BD_SAR4_2,
BD_SAR_fixef_ggplot_BD_SAR5_1,
RB_SAR_fixef_ggplot_RB_SAR4_1,
RB_SAR_fixef_ggplot_RB_SAR5_2,
IB_SAR_fixef_ggplot_IB_SAR4_1,
nrow = 2,
ncol = 3,
labels = c("A", "B", "C", "D", "E"),
font.label = list(size = 25))
ggsave("gxe_allelic_series_normalized_subset_supplemental.png", device = "png", width = 20, height = 10)
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/img/")
ggsave("gxe_allelic_series_normalized_subset_supplemental.png", device = "png", width = 20, height = 10)
