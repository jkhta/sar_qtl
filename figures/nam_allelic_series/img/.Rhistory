path_data_diff_B4 <- subset(path_data_FRI_FLC_ind, env == "diff" & allele_comb == "B4")
path_data_diff_B4[path_data_diff_B4 == 0] <- NA
path_data_diff_B4_ggplot <- ggplot(data = path_data_diff_B4, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20),
legend.position = "none") +
scale_x_continuous(
labels = scales::number_format(accuracy = 0.1)) +
ggtitle("SAR_4_1")
labels = scales::number_format(accuracy = 0.1)) +
ggtitle("SAR4_1")
path_data_diff_B4 <- subset(path_data_FRI_FLC_ind, env == "diff" & allele_comb == "B4")
path_data_diff_B4[path_data_diff_B4 == 0] <- NA
path_data_diff_B4_ggplot <- ggplot(data = path_data_diff_B4, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20),
legend.position = "none") +
scale_x_continuous(
labels = scales::number_format(accuracy = 0.1)) +
ggtitle("SAR4_1")
path_data_diff_B42 <- subset(path_data_FRI_FLC_ind, env == "diff" & allele_comb == "B42")
path_data_diff_B42[path_data_diff_B42 == 0] <- NA
path_data_diff_B42_ggplot <- ggplot(data = path_data_diff_B42, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20)) +
ggtitle("SAR4_2")
path_data_diff_B5 <- subset(path_data_FRI_FLC_ind, env == "diff" & allele_comb == "B5")
path_data_diff_B5[path_data_diff_B5 == 0] <- NA
path_data_diff_B5_ggplot <- ggplot(data = path_data_diff_B5, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20)) +
scale_x_continuous(breaks = round(seq(min(path_data_diff_B5$est, na.rm = TRUE), max(path_data_diff_B5$est, na.rm = TRUE), by = 0.3), 1)) +
ggtitle("SAR5")
ggarrange(path_data_diff_B4_ggplot, path_data_diff_B5_ggplot,
vjust = 1.1,
hjust = c(-4.5, -0.5),
labels = c("A", "B"),
font.label = list(size = 30))
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/path_analysis_figures/img/")
ggsave("SAR4_SAR5_effect_comparison.png", device = "png", width = 15, height = 6)
#no legend and yaxis text
path_data_diff_B42_ggplot <- ggplot(data = path_data_diff_B42, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 15),
axis.text.y = element_blank(),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20))  +
ggtitle("SAR4_2")
#yaxis text and legend
path_data_diff_B5_ggplot <- ggplot(data = path_data_diff_B5, aes(x = est, y = pop_facet, color = effect_type)) +
geom_point(size = 4) +
geom_errorbarh(aes(xmax = est + se, xmin = est - se), height = 0.25, size = 2) +
geom_vline(xintercept = 0,
color = "black", size = 0.25) +
facet_wrap(~ trait_facet, nrow = 1) +
xlab("QTL effect") +
ylab("Population") +
theme(legend.text = element_text(size = 20),
legend.title = element_blank(),
axis.title = element_text(size = 20),
axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 20),
plot.title = element_text(hjust = 0.5, size = 20),
strip.text.x = element_text(size = 20),
legend.position = "none") +
#scale_x_continuous(breaks = round(seq(min(path_data_diff_B5$est, na.rm = TRUE), max(path_data_diff_B5$est, na.rm = TRUE), by = 0.3), 1)) +
ggtitle("SAR5")
ggarrange(path_data_diff_B4_ggplot, path_data_diff_B42_ggplot, path_data_diff_B5_ggplot,
vjust = 1.1,
#hjust = c(-4.5, , -4),
labels = c("A", "B", "C"),
font.label = list(size = 30))
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/path_analysis_figures/img/")
ggsave("SAR4_SAR42_SAR5_effect_blups_comparison.png", device = "png", width = 18, height = 12)
#this script will make a table for the G QTL found
library(data.table)
library(xtable)
rm(list = ls())
#reading in tables for QTL found for genotype random effects (G QTL)
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/qtl_table/data/")
g_qtl_list <- lapply(list.files(pattern = "geno_qtl_ci.csv"), function(x) fread(x, sep = ",", header = TRUE, stringsAsFactors = FALSE))
g_qtl_phenotypes <- sapply(strsplit(list.files(pattern = "geno_qtl_ci.csv"), split = "_geno"), function(x) x[1])
#adding trait names to data and then list -> data table
for (i in 1:length(g_qtl_list)) {
g_qtl_list[[i]]$trait <- g_qtl_phenotypes[i]
}
g_qtl_comb <- rbindlist(g_qtl_list)
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, left_bound, right_bound))
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL", "SNP PVE", "-log10p", "Left Bound", "Right Bound")
g_qtl_comb_reordered
library(plyr)
g_qtl_comb
#changing trait names
g_qtl_comb$trait <- mapvalues(g_qtl_comb$trait, from = c("bd", "h3_h1", "i_dry", "r_dry"), to = c("BD", "IG", "IB", "RB"))
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, left_bound, right_bound))
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL", "SNP PVE", "-log10p", "Left Bound", "Right Bound")
g_qtl_comb_reordered
g_qtl_comb
g_qtl_comb$chromosome <- sapply(strsplit(g_qtl_comb$qtl, split = "_"), function(x) x[2])
g_qtl_comb
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, left_bound, right_bound))
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL", "SNP PVE", "-log10p", "Left Bound", "Right Bound")
g_qtl_comb_reordered_complete <- c()
nique(g_qtl_comb_reordered$Trait)
unique(g_qtl_comb_reordered$Trait)
i <- "BD"
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
#this script will make a table for the G QTL found
library(data.table)
library(xtable)
library(plyr)
rm(list = ls())
#reading in tables for QTL found for genotype random effects (G QTL)
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/qtl_table/data/")
g_qtl_list <- lapply(list.files(pattern = "geno_qtl_ci.csv"), function(x) fread(x, sep = ",", header = TRUE, stringsAsFactors = FALSE))
g_qtl_phenotypes <- sapply(strsplit(list.files(pattern = "geno_qtl_ci.csv"), split = "_geno"), function(x) x[1])
#adding trait names to data and then list -> data table
for (i in 1:length(g_qtl_list)) {
g_qtl_list[[i]]$trait <- g_qtl_phenotypes[i]
}
g_qtl_comb <- rbindlist(g_qtl_list)
#changing trait names and adding chromosome columns
g_qtl_comb$trait <- mapvalues(g_qtl_comb$trait, from = c("bd", "h3_h1", "i_dry", "r_dry"), to = c("BD", "IG", "IB", "RB"))
g_qtl_comb$chromosome <- sapply(strsplit(g_qtl_comb$qtl, split = "_"), function(x) x[2])
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, left_bound, right_bound))
colnames(g_qtl_comb_reordered)
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, chromosome, left_bound, right_bound))
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL", "SNP PVE", "-log10p", "Chromsome","Left Bound", "Right Bound")
g_qtl_comb_reordered
g_qtl_comb_reordered_complete <- c()
i <- "BD"
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
g_qtl_comb_reordered_subset
j <- 4
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset$QTL_no <- 1:nrow(g_qtl_comb_reordered_chr_subset)
g_qtl_comb_reordered_chr_subset$QTL <- paste(paste(g_qtl_comb_reordered_chr_subset$Trait, g_qtl_comb_reordered_chr_subset$Chromosome, sep = ""), g_qtl_comb_reordered_chr_subset$QTL_no, sep = "_")
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL", "SNP PVE", "-log10p", "Chromosome","Left Bound", "Right Bound")
_
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset$QTL_no <- 1:nrow(g_qtl_comb_reordered_chr_subset)
g_qtl_comb_reordered_chr_subset$QTL <- paste(paste(g_qtl_comb_reordered_chr_subset$Trait, g_qtl_comb_reordered_chr_subset$Chromosome, sep = ""), g_qtl_comb_reordered_chr_subset$QTL_no, sep = "_")
g_qtl_comb_reordered_chr_subset
g_qtl_comb_reordered_complete <- c()
#for each trait subset the QTL for that trait
for (i in unique(g_qtl_comb_reordered$Trait)) {
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
#for each chromosome with QTL, subset the data by chromosome and create new QTL names
for (j in unique(g_qtl_comb_reordered_subset$Chromosome)) {
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset$QTL_no <- 1:nrow(g_qtl_comb_reordered_chr_subset)
g_qtl_comb_reordered_chr_subset$QTL <- paste(paste(g_qtl_comb_reordered_chr_subset$Trait, g_qtl_comb_reordered_chr_subset$Chromosome, sep = ""), g_qtl_comb_reordered_chr_subset$QTL_no, sep = "_")
g_qtl_comb_reordered_complete <- rbindlist(list(g_qtl_comb_reordered_complete, g_qtl_comb_reordered_chr_subset))
}
}
g_qtl_comb_reordered_complete
#removing unnecessary columns
g_qtl_comb_reordered_complete$QTL_no <- NULL
g_qtl_comb_reordered_complete$`-log10p` <- NULL
print(xtable(g_qtl_comb_reordered_complete), include.rownames = FALSE)
g_qtl_comb_reordered_subset
g_qtl_comb_reordered_chr_subset
j <-
4
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset
#this script will make a table for the G QTL found
library(data.table)
library(xtable)
library(plyr)
rm(list = ls())
#reading in tables for QTL found for genotype random effects (G QTL)
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/qtl_table/data/")
g_qtl_list <- lapply(list.files(pattern = "geno_qtl_ci.csv"), function(x) fread(x, sep = ",", header = TRUE, stringsAsFactors = FALSE))
g_qtl_phenotypes <- sapply(strsplit(list.files(pattern = "geno_qtl_ci.csv"), split = "_geno"), function(x) x[1])
#adding trait names to data and then list -> data table
for (i in 1:length(g_qtl_list)) {
g_qtl_list[[i]]$trait <- g_qtl_phenotypes[i]
}
g_qtl_comb <- rbindlist(g_qtl_list)
#changing trait names and adding chromosome columns
g_qtl_comb$trait <- mapvalues(g_qtl_comb$trait, from = c("bd", "h3_h1", "i_dry", "r_dry"), to = c("BD", "IG", "IB", "RB"))
g_qtl_comb$chromosome <- sapply(strsplit(g_qtl_comb$qtl, split = "_"), function(x) x[2])
g_qtl_comb_reordered <- subset(g_qtl_comb, select = c(trait, qtl, avg_snp_pve, score, chromosome, left_bound, right_bound))
colnames(g_qtl_comb_reordered) <- c("Trait", "QTL Marker", "SNP PVE", "-log10p", "Chromosome","Left Bound", "Right Bound")
g_qtl_comb_reordered
#for each trait subset the QTL for that trait
for (i in unique(g_qtl_comb_reordered$Trait)) {
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
#for each chromosome with QTL, subset the data by chromosome and create new QTL names
for (j in unique(g_qtl_comb_reordered_subset$Chromosome)) {
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset$QTL_no <- 1:nrow(g_qtl_comb_reordered_chr_subset)
g_qtl_comb_reordered_chr_subset$QTL <- paste(paste(g_qtl_comb_reordered_chr_subset$Trait, g_qtl_comb_reordered_chr_subset$Chromosome, sep = ""), g_qtl_comb_reordered_chr_subset$QTL_no, sep = "_")
g_qtl_comb_reordered_complete <- rbindlist(list(g_qtl_comb_reordered_complete, g_qtl_comb_reordered_chr_subset))
}
}
g_qtl_comb_reordered_complete <- c()
#for each trait subset the QTL for that trait
for (i in unique(g_qtl_comb_reordered$Trait)) {
g_qtl_comb_reordered_subset <- subset(g_qtl_comb_reordered, Trait == i)
#for each chromosome with QTL, subset the data by chromosome and create new QTL names
for (j in unique(g_qtl_comb_reordered_subset$Chromosome)) {
g_qtl_comb_reordered_chr_subset <- subset(g_qtl_comb_reordered_subset, Chromosome == j)
g_qtl_comb_reordered_chr_subset$QTL_no <- 1:nrow(g_qtl_comb_reordered_chr_subset)
g_qtl_comb_reordered_chr_subset$QTL <- paste(paste(g_qtl_comb_reordered_chr_subset$Trait, g_qtl_comb_reordered_chr_subset$Chromosome, sep = ""), g_qtl_comb_reordered_chr_subset$QTL_no, sep = "_")
g_qtl_comb_reordered_complete <- rbindlist(list(g_qtl_comb_reordered_complete, g_qtl_comb_reordered_chr_subset))
}
}
g_qtl_comb_reordered_complete
#removing unnecessary columns
g_qtl_comb_reordered_complete$QTL_no <- NULL
g_qtl_comb_reordered_complete$`-log10p` <- NULL
#removing unnecessary columns
g_qtl_comb_reordered_complete$QTL_no <- NULL
g_qtl_comb_reordered_complete$`-log10p` <- NULL
#removing unnecessary columns
g_qtl_comb_reordered_complete$QTL_no <- NULL
g_qtl_comb_reordered_complete
#reordering variables again
g_qtl_comb_reordered_complete <- subset(g_qtl_comb_reordered_complete, select = c(Trait, QTL, `SNP PVE`, `QTL Marker`, Chromosome, Left Bound, Right Bound))
#reordering variables again
g_qtl_comb_reordered_complete <- subset(g_qtl_comb_reordered_complete, select = c(Trait, QTL, `SNP PVE`, `QTL Marker`, Chromosome, `Left Bound`, `Right Bound`))
g_qtl_comb_reordered_complete
print(xtable(g_qtl_comb_reordered_complete), include.rownames = FALSE)
#this script will generate a table with the credible intervals for the different statistics
library(data.table)
library(xtable)
rm(list = ls())
setwd("/Users/James/Documents/GitHub/sar_qtl/figures/h2_table/input/")
#reading in the credible interval table
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
fixef_h2_ci_table <- fread("trait_effects_and_h2_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
fixef_h2_ci_table
i <- 1
fixef_h2_ci_table_col <- fixef_h2_ci_table[, i]
fixef_h2_ci_table_col <- fixef_h2_ci_table[,..i]
fixef_h2_ci_table_col
fixef_h2_ci_table_col <- unlist(fixef_h2_ci_table[,..i])
fixef_h2_ci_table_col
fixef_h2_ci_table
fixef_h2_ci_table_col <- gsub("to", "-", fixef_h2_ci_table_col)
fixef_h2_ci_table_col
for (i in 1:ncol(fixef_h2_ci_table)) {
fixef_h2_ci_table_col <- unlist(fixef_h2_ci_table[,..i])
fixef_h2_ci_table_col <- gsub("to", "-", fixef_h2_ci_table_col)
fixef_h2_ci_table[,..i] <- fixef_h2_ci_table_col
}
fixef_h2_ci_table[,..i]
fixef_h2_ci_table <- fread("trait_effects_and_h2_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE,
data.table = FALSE)
for (i in 1:ncol(fixef_h2_ci_table)) {
fixef_h2_ci_table_col <- unlist(fixef_h2_ci_table[, i])
fixef_h2_ci_table_col <- gsub("to", "-", fixef_h2_ci_table_col)
fixef_h2_ci_table[, i] <- fixef_h2_ci_table_col
}
fixef_h2_ci_table
colnames(fixef_h2_ci_table_subset) <- c("Trait", "Shelf", "Intercept","Treatment", "Geno H2", "GxE PVE")
fixef_h2_ci_table_subset <- subset(fixef_h2_ci_table, select = c(1, 2, 3, 4, 8, 9))
fixef_h2_ci_table_subset
colnames(fixef_h2_ci_table_subset) <- c("Trait", "Shelf", "Intercept","Treatment", "Geno H2", "GxE PVE")
print(xtable(fixef_h2_ci_table_subset), include.rownames=FALSE)
fixef_h2_ci_table_subset
library(plyr)
#changing trait names
fixef_h2_ci_table_subset$Trait <- mapvalues(fixef_h2_ci_table_subset$Trait, from = c("bd_ci", "h3_h1_ci", "r_dry_ci", "i_dry_ci"), to = c("BD", "IG", "RB", "IB"))
fixef_h2_ci_table_subset
print(xtable(fixef_h2_ci_table_subset), include.rownames=FALSE)
#this script will generate a table with the credible intervals for the different statistics
library(data.table)
library(xtable)
library(plyr)
rm(list = ls())
#reading in the credible interval table
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
fixef_h2_ci_table <- fread("trait_effects_and_h2_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE,
data.table = FALSE)
for (i in 1:ncol(fixef_h2_ci_table)) {
fixef_h2_ci_table_col <- unlist(fixef_h2_ci_table[, i])
fixef_h2_ci_table_col <- gsub("to", "-", fixef_h2_ci_table_col)
fixef_h2_ci_table[, i] <- fixef_h2_ci_table_col
}
#choosing only some columns
fixef_h2_ci_table_subset <- subset(fixef_h2_ci_table, select = c(1, 2, 3, 4, 8, 9))
colnames(fixef_h2_ci_table_subset) <- c("Trait", "Shelf", "Intercept","Treatment", "Geno H2", "GxE PVE")
#changing trait names
fixef_h2_ci_table_subset$Trait <- mapvalues(fixef_h2_ci_table_subset$Trait, from = c("bd_ci", "h3_h1_ci", "r_dry_ci", "i_dry_ci"), to = c("BD_SAR", "IG_SAR", "RB_SAR", "IB_SAR"))
print(xtable(fixef_h2_ci_table_subset), include.rownames=FALSE)
#this script will plot the allelic series for each QTL and trait across populations
library(data.table)
library(ggplot2)
library(ggpubr)
rm(list = ls())
#reading in the allelic series data
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/data/")
nam_trait_lme4qtl_fixef <- fread("trait_lme4qtl_fixef_no_cov.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
#reading in the file to change qtl names
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/qtl_table/data/")
trait_qtl_name_match <- fread("sar_gxe_matched_qtl_name.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
trait_qtl_name_match$trait_qtl <- with(trait_qtl_name_match, paste(Trait, `QTL Marker`, sep = "_"))
#this is so the allele represents substituting from Col-0 allele to alternative
#parent allele
nam_trait_lme4qtl_fixef$fixef <- nam_trait_lme4qtl_fixef$fixef * -1
#only working with gxe traits
nam_trait_lme4qtl_fixef_gxe <- subset(nam_trait_lme4qtl_fixef, grepl("_gxe", trait))
nam_trait_lme4qtl_fixef_gxe$fixef_norm <- with(nam_trait_lme4qtl_fixef_gxe, fixef/abs(trt_eff))
nam_trait_lme4qtl_fixef_gxe$fixef_std_norm <- with(nam_trait_lme4qtl_fixef_gxe, fixef_std/abs(trt_eff))
#changing trait names
new_trait_name_df <- data.frame(old_name = c("bd_gxe", "h3_h1_gxe", "i_dry_gxe", "r_dry_gxe"),
new_name = c("BD_SAR", "IG_SAR", "IB_SAR", "RB_SAR"),
stringsAsFactors = FALSE)
nam_trait_lme4qtl_fixef_gxe$trait <- mapvalues(nam_trait_lme4qtl_fixef_gxe$trait,
from = new_trait_name_df$old_name,
to = new_trait_name_df$new_name)
nam_trait_lme4qtl_fixef_gxe$trait_qtl <- with(nam_trait_lme4qtl_fixef_gxe, paste(trait, qtl, sep = "_"))
nam_trait_lme4qtl_fixef_gxe$QTL <- mapvalues(nam_trait_lme4qtl_fixef_gxe$trait_qtl,
from = trait_qtl_name_match$trait_qtl,
to = trait_qtl_name_match$QTL)
for (i in unique(nam_trait_lme4qtl_fixef_gxe$trait)) {
nam_trait_lme4qtl_fixef_gxe_subset <- subset(nam_trait_lme4qtl_fixef_gxe, trait == i)
nam_trait_lme4qtl_fixef_gxe_subset <- nam_trait_lme4qtl_fixef_gxe_subset[order(nam_trait_lme4qtl_fixef_gxe_subset$qtl), ]
for (j in unique(nam_trait_lme4qtl_fixef_gxe_subset$QTL)) {
nam_trait_lme4qtl_fixef_gxe_subset_qtl <- subset(nam_trait_lme4qtl_fixef_gxe_subset, QTL == j)
plot_name <- paste(i, "fixef_ggplot", j, sep = "_")
assign(plot_name, ggplot(nam_trait_lme4qtl_fixef_gxe_subset_qtl, aes(x = pop, y = fixef_norm, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef_norm - fixef_std_norm, ymax = fixef_norm + fixef_std_norm), width = 0.2) +
facet_grid(~ QTL, scale = "free") +
xlab("Population") +
ylab("% Change in plasticity") +
theme(text = element_text(size = 20),
axis.text = element_text(size = 20),
plot.title = element_text(hjust = 0.5),
strip.text.x = element_text(size = 20),
legend.position = "none"))
}
}
#plotting all plots
ggarrange(BD_SAR_fixef_ggplot_BD_SAR4_1,
BD_SAR_fixef_ggplot_BD_SAR4_2,
BD_SAR_fixef_ggplot_BD_SAR5_1,
RB_SAR_fixef_ggplot_RB_SAR4_1,
RB_SAR_fixef_ggplot_RB_SAR4_2,
RB_SAR_fixef_ggplot_RB_SAR5_1,
RB_SAR_fixef_ggplot_RB_SAR5_2,
IG_SAR_fixef_ggplot_IG_SAR2_1,
IG_SAR_fixef_ggplot_IG_SAR5_1,
IB_SAR_fixef_ggplot_IB_SAR4_1,
IB_SAR_fixef_ggplot_IB_SAR5_1,
nrow = 4,
ncol = 3,
labels = c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L"),
font.label = list(size = 25))
#this script will plot the allelic series for each QTL and trait across populations
library(data.table)
library(ggplot2)
library(ggpubr)
rm(list = ls())
#reading in the allelic series data
setwd("/Users/James/Documents/GitHub/sar_qtl/figures/nam_allelic_series/data/")
#reading in the allelic series data
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/data/")
nam_trait_lme4qtl_fixef <- fread("trait_lme4qtl_fixef_no_cov.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
nam_trait_lme4qtl_fixef
#this is so the allele represents substituting from Col-0 allele to alternative
#parent allele
nam_trait_lme4qtl_fixef$fixef <- nam_trait_lme4qtl_fixef$fixef * -1
bd_geno_fixef <- subset(nam_trait_lme4qtl_fixef, trait == "bd_geno")
bd_geno_fixef
bd_geno_fixef
#changing QTL names
bd_geno_fixef$qtl <- mapvalues(bd_geno_fixef$qtl, from = c("m_4_407208", "m_5_3799350"), to = ("BD4_1" "BD5_2"))
#changing QTL names
bd_geno_fixef$qtl <- mapvalues(bd_geno_fixef$qtl, from = c("m_4_407208", "m_5_3799350"), to = ("BD4_1", "BD5_2"))
#changing QTL names
bd_geno_fixef$qtl <- mapvalues(bd_geno_fixef$qtl, from = c("m_4_407208", "m_5_3799350"), to = c("BD4_1", "BD5_2"))
bd_geno_fixef
bd_geno_fixef_ggplot_m_4_407208 <- ggplot(subset(bd_geno_fixef, qtl == "m_4_407208"), aes(x = pop, y = fixef, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef - fixef_std, ymax = fixef + fixef_std), width = 0.2) +
facet_grid(~ qtl, scale = "free") +
xlab("Population") +
ylab("QTL effect") +
ggtitle("Bolting time") +
theme(text = element_text(size = 25),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
bd_geno_fixef_ggplot_m_4_407208 <- ggplot(subset(bd_geno_fixef, qtl == "m_4_407208"), aes(x = pop, y = fixef, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef - fixef_std, ymax = fixef + fixef_std), width = 0.2) +
facet_grid(~ qtl, scale = "free") +
xlab("Population") +
ylab("QTL effect") +
theme(text = element_text(size = 25),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
bd_geno_fixef_ggplot_m_5_3799350 <- ggplot(subset(bd_geno_fixef, qtl == "m_5_3799350"), aes(x = pop, y = fixef, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef - fixef_std, ymax = fixef + fixef_std), width = 0.2) +
facet_grid(~ qtl, scale = "free") +
xlab("Population") +
ylab("QTL effects") +
theme(text = element_text(size = 25),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.title.y = element_blank())
bd_geno_fixef_ggplot_m_4_407208 <- ggplot(subset(bd_geno_fixef, qtl == "BD4_1"), aes(x = pop, y = fixef, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef - fixef_std, ymax = fixef + fixef_std), width = 0.2) +
facet_grid(~ qtl, scale = "free") +
xlab("Population") +
ylab("QTL effect") +
theme(text = element_text(size = 25),
plot.title = element_text(hjust = 0.5),
legend.position = "none")
bd_geno_fixef_ggplot_m_5_3799350 <- ggplot(subset(bd_geno_fixef, qtl == "BD5_2"), aes(x = pop, y = fixef, fill = pop)) +
geom_bar(stat = "identity") +
geom_errorbar(aes(ymin = fixef - fixef_std, ymax = fixef + fixef_std), width = 0.2) +
facet_grid(~ qtl, scale = "free") +
xlab("Population") +
ylab("QTL effects") +
theme(text = element_text(size = 25),
plot.title = element_text(hjust = 0.5),
legend.position = "none",
axis.title.y = element_blank())
ggarrange(bd_geno_fixef_ggplot_m_4_407208,
bd_geno_fixef_ggplot_m_5_3799350,
nrow = 1, ncol = 2,
labels = c("A", "B"),
font.label = list(size = 25))
setwd("/Users/James/Documents/GitHub/sar_qtl/figures/nam_allelic_series/img/")
ggsave("bd_geno_allelic_series.png", device = "png", width = 14, height = 8)
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/img/")
ggsave("bd_geno_allelic_series.png", device = "png", width = 14, height = 8)
