library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
i <- 1
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
chosen_phenotype
phenotype_brm
phenotype_brm <- paste(chosen_phenotype, "adapt", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
brm_file_names
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
test <- readRDS(brm_file_names[1])
parnames(test)
#this script will generate a table for the significances of the fixed, random, and heritabilities
#i will generate credible intervals for each effect
library(brms)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " to ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
i <- 1
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_tables
pop_all_avg_values_list <- list()
colnames(pop_tables[[1]])
j <- colnames(pop_tables[[1]])[1]
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_values
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_values
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list <- list()
#now need to average the values
for (j in colnames(pop_tables[[1]])) {
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list[[j]] <- pop_avg_value_df
}
pop_all_avg_values_list
#putting all effects into same df
pop_all_avg_values_df <- do.call(cbind, pop_all_avg_values_list)
pop_all_avg_values_df
#generating means and credible intervals
trait_mean_and_ci <- do.call(cbind, apply(pop_all_avg_values_df, 2, function(x) post_mean_and_ci(x)))
colnames(trait_mean_and_ci) <- colnames(pop_tables[[1]])
rownames(trait_mean_and_ci) <- c(chosen_phenotype, paste(chosen_phenotype, "ci", sep = "_"))
all_trait_table <- rbind(all_trait_table, trait_mean_and_ci)
#this script will generate a table for the significances of the fixed, random, and heritabilities
#i will generate credible intervals for each effect
library(brms)
library(data.table)
rm(list = ls())
setwd("/Users/jkhta/Desktop/testing/brms_output/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " to ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept", "b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
phenotype_brm <- paste(chosen_phenotype, "adapt_0.99_brm", sep = "_")
brm_file_names <- list.files(pattern = phenotype_brm, recursive = TRUE)
pop_brms <- lapply(brm_file_names, function(x) readRDS(x))
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
pop_tables <- lapply(pop_brms, function(x) table_formatter(x))
pop_all_avg_values_list <- list()
#now need to average the values
for (j in colnames(pop_tables[[1]])) {
pop_values <- do.call(cbind, lapply(pop_tables, function(x) subset(x, select = j)))
pop_avg_values <- apply(pop_values, 1, function(x) mean(x))
pop_avg_value_df <- data.frame(pop_avg_values)
colnames(pop_avg_value_df) <- j
pop_all_avg_values_list[[j]] <- pop_avg_value_df
}
#putting all effects into same df
pop_all_avg_values_df <- do.call(cbind, pop_all_avg_values_list)
#generating means and credible intervals
trait_mean_and_ci <- do.call(cbind, apply(pop_all_avg_values_df, 2, function(x) post_mean_and_ci(x)))
colnames(trait_mean_and_ci) <- colnames(pop_tables[[1]])
rownames(trait_mean_and_ci) <- c(chosen_phenotype, paste(chosen_phenotype, "ci", sep = "_"))
all_trait_table <- rbind(all_trait_table, trait_mean_and_ci)
}
all_trait_table
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", rownames(all_trait_table)))
all_trait_table_ci_only
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", rownames(all_trait_table)))
all_trait_table_no_ci
colnames(all_trait_table)
all_trait_table <- as.data.frame(data.table(all_trait_table, keep.rownames = TRUE))
colnames(all_trait_table)[1] <- "trait"
all_trait_table
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", rownames(all_trait_table)))
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", rownames(all_trait_table)))
all_trait_table_ci_only
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", trait))
all_trait_table_ci_only
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", trait))
all_trait_table_no_ci
setwd("/Users/jkhta/Desktop/nam_cam_fixing/29 - Heritabilities/output/")
fwrite(all_trait_table, file = "trait_effects_and_h2.csv", sep = ",", row.names = TRUE, col.names = TRUE)
fwrite(all_trait_table_ci_only, file = "trait_effects_and_h2_ci.csv", sep = ",", row.names = TRUE, col.names = TRUE)
fwrite(all_trait_table_no_ci, file = "trait_effects_and_h2_no_ci.csv", sep = ",", row.names = TRUE, col.names = TRUE)
setwd("/Users/jkhta/Desktop/nam_cam_fixing/29 - Heritabilities/output/")
fwrite(all_trait_table, file = "trait_effects_and_h2.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_ci_only, file = "trait_effects_and_h2_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
fwrite(all_trait_table_no_ci, file = "trait_effects_and_h2_no_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
sqrt(all_trait_table_no_ci$gxe_var)/all_trait_table_no_ci$treatment_fixef
all_trait_table <- data.frame(data.table(all_trait_table, keep.rownames = TRUE), stringsAsFactors = FALSE)
colnames(all_trait_table)[1] <- "trait"
all_trait_table_ci_only <- subset(all_trait_table, grepl("_ci", trait))
all_trait_table_no_ci <- subset(all_trait_table, !grepl("_ci", trait))
sqrt(as.numeric(all_trait_table_no_ci$gxe_var))/all_trait_table_no_ci$treatment_fixef
sqrt(as.numeric(all_trait_table_no_ci$gxe_var))/as.numeric(all_trait_table_no_ci$treatment_fixef)
#this script will generate the accession heritability values for each trait
library(data.table)
library(brms)
rm(list = ls())
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/2_lmm_models/output/brms_models/accessions/")
#this script will generate the accession heritability values for each trait
library(data.table)
library(brms)
rm(list = ls())
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/2_lmm_models/output/brms_models/accessions/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " to ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept","b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
i <- 1
chosen_phenotype <- phenotype[i]
brm_file_name <- list.files(pattern = chosen_phenotype, recursive = TRUE)
pop_brms <- readRDS(brm_file_name)
#need to pull out the samples for those variables
pop_table <- table_formatter(pop_brms)
pop_table
pop_all_avg_values_list <- list()
all_trait_table <- c()
i <- 1
chosen_phenotype <- phenotype[i]
brm_file_name <- list.files(pattern = chosen_phenotype, recursive = TRUE)
acc_brms <- readRDS(brm_file_name)
#need to pull out the samples for those variables
acc_trait_table <- table_formatter(acc_brms)
acc_trait_post_mean_table <- apply(acc_trait_table, 1, function(x) mean(x))
acc_trait_post_mean_table$trait <- chosen_phenotype
acc_trait_post_mean_table
acc_trait_table
acc_trait_post_mean_table <- apply(acc_trait_table, 2, function(x) mean(x))
acc_trait_post_mean_table
acc_trait_post_mean_table$trait <- chosen_phenotype
acc_trait_post_mean_table <- as.data.frame(apply(acc_trait_table, 2, function(x) mean(x)))
acc_trait_post_mean_table
acc_trait_post_mean_table <- as.data.frame(t(acc_trait_post_mean_table))
acc_trait_post_mean_table
acc_trait_post_mean_table$trait <- chosen_phenotype
acc_trait_post_mean_table
#this script will generate the accession heritability values for each trait
library(data.table)
library(brms)
rm(list = ls())
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/2_lmm_models/output/brms_models/accessions/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " to ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept","b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
brm_file_name <- list.files(pattern = chosen_phenotype, recursive = TRUE)
acc_brms <- readRDS(brm_file_name)
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
acc_trait_table <- table_formatter(acc_brms)
acc_trait_post_mean_table <- apply(acc_trait_table, 2, function(x) mean(x))
acc_trait_post_mean_table <- as.data.frame(t(acc_trait_post_mean_table))
acc_trait_post_mean_table$trait <- chosen_phenotype
all_trait_table <- rbind(all_trait_table, acc_trait_post_mean_table)
}
all_trait_table
acc_trait_post_mean_table
names(acc_trait_post_mean_table) <- paste("acc", names(acc_trait_post_mean_table), sep = "_")
#this script will generate the accession heritability values for each trait
library(data.table)
library(brms)
rm(list = ls())
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/2_lmm_models/output/brms_models/accessions/")
table_formatter <- function(brms_object) {
#grabbing the posterior samples
pop_ps <- posterior_samples(brms_object, pars = required_parnames)
#turning sd into variance
pop_ps$sd_geno__Intercept <- pop_ps$sd_geno__Intercept^2
pop_ps$sd_geno__treatment2 <- pop_ps$sd_geno__treatment2^2
pop_ps$sigma <- pop_ps$sigma^2
#renaming the variables
colnames(pop_ps) <- c("shelf_fixef", "int_fixef","treatment_fixef", "geno_var", "gxe_var", "res")
#calculating heritabilities
pop_ps$geno_h2 <- with(pop_ps, geno_var / (geno_var + gxe_var + res))
pop_ps$gxe_h2 <- with(pop_ps, gxe_var / (geno_var + gxe_var + res))
return(pop_ps)
}
post_mean_and_ci <- function(post_vector) {
#mean of posterior
post_mean <- mean(post_vector)
post_mean <- round(post_mean, digits = 4)
#credible interval of posteriors
post_ci <- quantile(post_vector, probs = c(0.025, 0.975))
post_ci <- round(post_ci, digits = 4)
post_ci_string <- paste(post_ci[1], post_ci[2], sep = " to ")
return(data.frame(c(post_mean, post_ci_string)))
}
phenotype <- c("bd", "h3_h1", "r_dry", "i_dry")
required_parnames <- c("b_shelf", "b_Intercept","b_treatment2", "sd_geno__Intercept", "sd_geno__treatment2", "sigma")
all_trait_table <- c()
for (i in 1:length(phenotype)) {
chosen_phenotype <- phenotype[i]
brm_file_name <- list.files(pattern = chosen_phenotype, recursive = TRUE)
acc_brms <- readRDS(brm_file_name)
#want to have a table of credible intervals for block (shelf) effects,
#treatment effects, line (genotype) effects, and line by treatment effects (GxE)
#need to pull out the samples for those variables
acc_trait_table <- table_formatter(acc_brms)
acc_trait_post_mean_table <- apply(acc_trait_table, 2, function(x) mean(x))
names(acc_trait_post_mean_table) <- paste("acc", names(acc_trait_post_mean_table), sep = "_")
acc_trait_post_mean_table <- as.data.frame(t(acc_trait_post_mean_table))
acc_trait_post_mean_table$trait <- chosen_phenotype
all_trait_table <- rbind(all_trait_table, acc_trait_post_mean_table)
}
all_trait_table
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
fwrite(all_trait_table, "acc_trait_effects_and_h2_no_ci.csv", sep = ",", row.names = FALSE, col.names = TRUE)
#this script will generate a LaTeX output of different tables
library(data.table)
library(xtable)
rm(list = ls())
#table output for trait effects and heritabilities
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
h2_table <- fread("trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
acc_h2_table <- fread("acc_trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
acc_h2_table
h2_table
acc_h2_table
acc_h2_table_subset <- subset(acc_h2_table, select = c(trait, acc_gxe_h2))
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table, by = trait)
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table, by = "trait")
h2_table_merge
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table_subset, by = "trait")
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table_subset, by = "trait")
h2_table_merge
colnames(h2_table) <- c("Trait", "Shelf (sd)", "Intercept(sd)", "Treatment (sd)", "Geno Var", "GxE Var", "Residual Var", "H2 (%)", "GxE PVE (%)")
colnames(h2_table) <- c("Trait", "Shelf (sd)", "Intercept(sd)", "Treatment (sd)", "Geno Var", "GxE Var", "Residual Var", "H2 (%)", "GxE PVE (%)", "Acc GxE PVE (%)")
h2_table
#changing column names and removing underscores
rownames(h2_table_merge) <- NULL
colnames(h2_table_merge) <- c("Trait", "Shelf (sd)", "Intercept(sd)", "Treatment (sd)", "Geno Var", "GxE Var", "Residual Var", "H2 (%)", "GxE PVE (%)", "Acc GxE PVE (%)")
h2_table_merge
colnames(h2_table_merge) <- c("Trait", "Shelf", "Intercept", "Treatment", "Geno Var", "GxE Var", "Residual Var", "H2", "GxE PVE", "Acc GxE PVE")
h2_table_merge$`GxE PVE` <- h2_table_merge$`GxE PVE` * 100
h2_table_merge$`Acc GxE PVE` <- h2_table_merge$`Acc GxE PVE` * 100
h2_table_merge
#moreving underscores
h2_table$Trait <- gsub("_", "", h2_table$Trait)
#moreving underscores
h2_table_merge$Trait <- gsub("_", "", h2_table_merge$Trait)
#generating xtable
print(xtable(h2_table_merge, caption = "Table 1", digits = 2), include.rownames=FALSE)
h2_table_merge
#this script will generate a LaTeX output of different tables
library(data.table)
library(xtable)
rm(list = ls())
#table output for trait effects and heritabilities
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/h2_table/input/")
h2_table <- fread("trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
acc_h2_table <- fread("acc_trait_effects_and_h2_no_ci.csv",
sep = ",",
header = TRUE,
stringsAsFactors = FALSE)
#grabbing only the gxe heritability
acc_h2_table_subset <- subset(acc_h2_table, select = c(trait, acc_gxe_h2))
#nam stats with acc stats
h2_table_merge <- merge(h2_table, acc_h2_table_subset, by = "trait")
h2_table_merge
#changing column names and removing underscores
rownames(h2_table_merge) <- NULL
colnames(h2_table_merge) <- c("Trait", "Shelf", "Intercept", "Treatment", "Geno Var", "GxE Var", "Residual Var", "H2", "GxE PVE", "Acc GxE PVE")
#multiplying H2 and GxE PVE by 100 to represent percentages
h2_table_merge$H2 <- h2_table_merge$H2 * 100
h2_table_merge$`GxE PVE` <- h2_table_merge$`GxE PVE` * 100
h2_table_merge$`Acc GxE PVE` <- h2_table_merge$`Acc GxE PVE` * 100
#moreving underscores
h2_table_merge$Trait <- gsub("_", "", h2_table_merge$Trait)
#generating xtable
print(xtable(h2_table_merge, caption = "Table 1", digits = 2), include.rownames=FALSE)
#generating xtable
print(xtable(h2_table_merge, label = ("S2_Table"), digits = 2), include.rownames=FALSE)
#generating xtable
print(xtable(h2_table_merge, label = ("S2_Table"), digits = 2), include.rownames=FALSE)
h2_table
#table with sun intercept, treatment fixed effect, and coefficient of variation
h2_table_new <- data.frame(Trait = h2_table$trait,
Intercept = h2_table$int_fixef,
Treatment = h2_table$treatment_fixef,
CV = sqrt(h2_table$gxe_var)/h2_table$treatment_fixef)
#table with sun intercept, treatment fixed effect, and coefficient of variation
h2_table_new <- data.frame(Trait = h2_table$trait,
Intercept = h2_table$int_fixef,
Treatment = h2_table$treatment_fixef,
CV = sqrt(h2_table$gxe_var)/h2_table$treatment_fixef,
stringsAsFactors = FALSE)
h2_table_new
print(xtable(h2_table_new, label = ("Table 1"), caption = "Averages of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) for each trait.", digits = 2), include.rownames=FALSE)
print(xtable(h2_table_new, label = ("Table 1"), caption = "Averages of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) for each trait. bd, bolting time; h3h1, inflorescence growth over 2 weeks; rdry, dry rosette biomass; idry, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
h2_table_new$Trait <- gsub("_", "", h2_table_new$Trait)
print(xtable(h2_table_new, label = ("Table 1"), caption = "Averages of the intercept and treatment fixed effects, and the coefficient of variation for plasticity (CV) for each trait. bd, bolting time; h3h1, inflorescence growth over 2 weeks; rdry, dry rosette biomass; idry, dry inflorescence biomass.", digits = 2), include.rownames=FALSE)
#this script will generate the lme4qtl models to get the standard errors of the effects
library(lme4qtl)
library(data.table)
library(plyr)
rm(list = ls())
#reading in the kinship information
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/path_analysis_GridLMM/")
nam_kinship <- readRDS("nam_GridLMM_kinship.RDS")
#reading in the kinship information
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/path_analysis_GridLMM/data/")
nam_kinship <- readRDS("nam_GridLMM_kinship.RDS")
#reading in the GridLMM stepwise models
trait_qtl_fixef <- c()
setwd("/Users/jkhta/Documents/GitHub/sar_qtl/figures/nam_allelic_series/input/")
gridlmm_models <- list.files(pattern = "GridLMM_stepwise_model.RDS")
#function to merge the genotype and phenotype information into a single data frame
geno_pheno_merger <- function(pop_name, nam_data, sig_qtl) {
pop_geno_pheno <- nam_data[[pop_name]]
pop_pheno <- pop_geno_pheno$pop_pheno
pop_geno <- as.data.table(pop_geno_pheno$pop_geno, keep.rownames = TRUE)
colnames(pop_geno)[1] <- "geno"
geno_col_subset <- which(colnames(pop_geno) %in% c("geno", gridlmm_qtl))
pop_geno_qtl <- subset(pop_geno, select = geno_col_subset)
pop_geno_pheno_merge <- merge(pop_pheno, pop_geno_qtl, by = "geno")
return(pop_geno_pheno_merge)
}
#generating a table for the fixed effects and standard errors
fixef_std_tabler <- function(pop_lme4qtl_model, nam_population, trait_of_interest, sig_qtl) {
model_fixef <- fixef(pop_lme4qtl_model)
model_fixef_std <- coef(summary(pop_lme4qtl_model))[, "Std. Error"]
qtl_coef_ind <- tail(1:length(model_fixef), length(sig_qtl))
qtl_fixef <- model_fixef[qtl_coef_ind]
qtl_fixef_std <- model_fixef_std[qtl_coef_ind]
qtl_coef_df <- data.frame(qtl = names(qtl_fixef),
fixef = qtl_fixef,
fixef_std = qtl_fixef_std,
trait = trait_of_interest,
pop = nam_population,
stringsAsFactors = FALSE)
return(qtl_coef_df)
}
#generating a kinship matrix with the QTL removed from the kinship estimation
proximal_kinship_generator <- function(geno_pheno_data, sig_qtl) {
pop_geno <- geno_pheno_data$pop_geno
pop_proximal <- geno_pheno_data$cM_proximal
rownames(pop_proximal) <- colnames(pop_proximal) <- colnames(pop_geno)
pop_proximal_subset <- pop_proximal[rownames(pop_proximal) %in% sig_qtl, ]
#if trait only has 1 qtl then keep the vector the same; if the trait
#has more than one than apply the sum function
if (is.null(dim(pop_proximal_subset)) == TRUE) {
pop_proximal_comb <- pop_proximal_subset
} else {
pop_proximal_comb <- unlist(apply(pop_proximal_subset, 2, function(x) sum(x)))
}
pop_proximal_tf <- ifelse(pop_proximal_comb > 0, FALSE, TRUE)
pop_geno_subset <- pop_geno[, pop_proximal_tf]
X  <- pop_geno_subset
X2 <- sweep(X, 2, colMeans(X),"-")
proximal_kinship <- tcrossprod(X2)/ncol(X2)
return(proximal_kinship)
}
gridlmm_models
